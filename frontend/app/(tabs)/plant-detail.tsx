import { StyleSheet, Image, Pressable, Text, View } from 'react-native';
import { useLocalSearchParams } from 'expo-router';
import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import { useState, useEffect } from 'react';
import { MaterialIcons } from '@expo/vector-icons'; // ‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
import { useRouter } from 'expo-router'; // ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á

type PlantCareDetail = {
  humidity: string;
  nutrients: string;
  light: string;
  image: any;
};

const getPlantCareInfo = async (plantName: string): Promise<PlantCareDetail> => {
  const mockData: Record<string, PlantCareDetail> = {
    '‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πà‡∏≤': {
      humidity: '‡∏ä‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ñ‡∏∂‡∏á‡∏™‡∏π‡∏á',
      nutrients: '‡∏Ñ‡∏ß‡∏£‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢‡∏™‡∏π‡∏ï‡∏£‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡∏∞ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      light: '‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î‡∏£‡∏≥‡πÑ‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡πà‡∏°',
      image: require('@/assets/images/plant-banner.jpg'),
    },
    // ...‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  };

  await new Promise(resolve => setTimeout(resolve, 1000));
  return mockData[plantName] || {
    humidity: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
    nutrients: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
    light: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
    image: require('@/assets/images/icon.png'),
  };
};

export default function PlantDetailScreen() {
  const { name } = useLocalSearchParams();
  const [careInfo, setCareInfo] = useState<PlantCareDetail | null>(null);
  const [lightOn, setLightOn] = useState<boolean>(true);
  const router = useRouter(); // ‡πÉ‡∏ä‡πâ useRouter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á

  const fetchCareInfo = async (plantName: string) => {
    const info = await getPlantCareInfo(plantName);
    setCareInfo(info);
  };

  useEffect(() => {
    if (typeof name === 'string') {
      fetchCareInfo(name);
    }
  }, [name]);

  const handleWaterPlant = () => {
    alert('üíß ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÅ‡∏•‡πâ‡∏ß!');
  };

  const handleToggleLight = () => {
    setLightOn(prev => !prev);
    alert(`üí° ‡πÑ‡∏ü‡∏ñ‡∏π‡∏Å${lightOn ? '‡∏õ‡∏¥‡∏î' : '‡πÄ‡∏õ‡∏¥‡∏î'}‡πÅ‡∏•‡πâ‡∏ß`);
  };

  const goToWateringHistory = () => {
    router.push('/historyScreen'); // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πã‡∏¢
  };

  return (
    <ThemedView style={styles.container}>
      <ThemedText type="title">ü™¥ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ</ThemedText>

      {careInfo ? (
        <>
          {/* ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏î‡∏ô‡πâ‡∏≥ */}
          <View style={styles.imageContainer}>
            <Image source={careInfo.image} style={styles.image} />
            <Pressable style={styles.historyButton} onPress={goToWateringHistory}>
              <MaterialIcons name="history" size={24} color="white" />
            </Pressable>
          </View>

          <ThemedText type="defaultSemiBold" style={styles.section}>üå° ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô:</ThemedText>
          <ThemedText>{careInfo.humidity}</ThemedText>

          <ThemedText type="defaultSemiBold" style={styles.section}>üå± ‡πÅ‡∏£‡πà‡∏ò‡∏≤‡∏ï‡∏∏‡πÉ‡∏ô‡∏î‡∏¥‡∏ô:</ThemedText>
          <ThemedText>{careInfo.nutrients}</ThemedText>

          <ThemedText type="defaultSemiBold" style={styles.section}>‚òÄÔ∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏™‡∏á:</ThemedText>
          <ThemedText>{careInfo.light}</ThemedText>

          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° */}
          <Pressable style={styles.button} onPress={handleWaterPlant}>
            <Text style={styles.buttonText}>üíß ‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ</Text>
          </Pressable>

          <Pressable style={styles.button} onPress={handleToggleLight}>
            <Text style={styles.buttonText}>
              üí° {lightOn ? '‡∏õ‡∏¥‡∏î‡πÑ‡∏ü' : '‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü'}
            </Text>
          </Pressable>
        </>
      ) : (
        <ThemedText>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</ThemedText>
      )}
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 24,
    gap: 12,
  },
  imageContainer: {
    position: 'relative',
    width: '100%',
    height: 200,
    marginBottom: 16,
  },
  image: {
    width: '100%',
    height: '100%',
    resizeMode: 'cover',
    borderRadius: 12,
  },
  historyButton: {
    position: 'absolute',
    top: 8,
    right: 8,
    backgroundColor: '#00000080',
    padding: 8,
    borderRadius: 50,
    alignItems: 'center',
    justifyContent: 'center',
  },
  section: {
    marginTop: 12,
  },
  button: {
    backgroundColor: '#A1D99B',
    padding: 14,
    borderRadius: 10,
    alignItems: 'center',
    marginTop: 16,
  },
  buttonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2D2D2D',
  },
});
